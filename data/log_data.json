{"log_List":[{"id":1694785377883,"title":"反射元素","content":"-webkit-box-reflect: below 0px linear-gradient(transparent 10%, rgb(0, 0, 0, 0.4) 90%);\n大概是将div元素进行一个反射，项目里面首次运用到歌曲封面","time":"2023-09-15","pretime":"2023-09-15"},{"id":1694347477842,"title":"我将我的项目放到github上了","content":"写了这么久的代码，我基本上都是再本地写，都没有想过将代码放到git上，（其实只是因为懒）因为我觉得我只要会写代码就可以了，但是在公司忙的这几天，渐渐的发现，还是必须要掌握这玩意，不然等到以后再学习，估计会很不占优势，嘛，现在来记录记录流程，以及我用道德命令：\n1.在github创建好仓库，应该在命令里面也可以吧\n2.初始化本地仓库，在对应的项目文件夹输入git init命令\n3.添加到本地仓库git add .，注意，这里有个点\n4.提交更改git commit -m \"Initial commit\"\n5.配置远程仓库 git remote add origin 我的地址\n6.推送到远程仓库 git push -u origin master\n\n如果你没有创建分支，下面有几条命令\n1.查看分支：git branch\n2.创建并切换到分支：git checkout -b 新建的分支\n3.将这个分支与我的仓库关联：git remote add origin 我的地址\n4.执行推送：git push -u origin master","time":"2023-09-10","pretime":"2023-09-10"},{"id":1693213037353,"title":"vue3给函数添加防抖","content":"先引入import { debounce } from 'lodash';\n\n然后创建函数的时候以回调函数的方式创建：\nconst func = debounce ((value)=>{\n  // 逻辑代码\n  console.log('我是防抖函数',value)\n},200)\n\n其中func是函数名，debounce是防抖函数前缀，然后在回调函数里面编写逻辑，最后的200是防抖延迟时间","time":"2023-08-28","pretime":"2023-08-27"},{"id":1693039679443,"title":"关于Pinia赋值为响应式","content":"当在Pinia里面的state定义变量的时候，Pinia的变量是带有响应式的，在组件里面将这个变量赋值给组件里面的变量，那么组件里面的这个变量也会变成响应式","time":"2023-08-26","pretime":"2023-08-26"},{"id":1692853328699,"title":"找到个有用的东西，CSS里面的宽高比","content":"例子：\nhtml:\n<div class=\"player\"><div>\n\ncss:\n.player{\nwidth:100%;\nbackground-color:#000;\naspect-radio:16/9;\n}\n这样的话，高度会根据宽度的变化而动态保持16:9的宽高比","time":"2023-08-24","pretime":"2023-08-24"},{"id":1692773392142,"title":"关于这个transtion","content":"在vue3里面，他的用法是：\n<RouterView v-slot=\"{ Component }\">\n   <transition name=\"fade-transform\" mode=\"out-in\">\n     <keep-alive>\n       <component :is=\"Component\" />\n     </keep-alive>\n   </transition>\n</RouterView>\n然后在css里面定义动画\n/* fade */\n/* 页面出现与消失 */\n.fade-enter-active{\n  transform: translateY(-30px);\n  opacity: 0;\n  transition: all .5s;\n}\n\n.fade-enter-to{\n  opacity: 1;\n  transform: translateY(0px);\n}\n\n.fade-leave-active{\n  transition: all .5s;\n}\n\n.fade-leave-to{\n  opacity: 0;\n  transform: translateY(-30px);\n}","time":"2023-08-23","pretime":"2023-08-22"},{"id":1692351038696,"title":"今天还是整了整这个搜索功能","content":"对于这个搜索功能，除了搜索歌曲之外，我发现他的搜索类型和searchid是没有关系的，其实早该想到的应该是和type有关，但是当时注意力集中到了sign和searchid，反而忽略了type的关键，然后呢算是让我试出了type的参数对应的类型：0：单曲，1：歌手，2：专辑，3：歌单，4：mv，7：歌词，8：用户","time":"2023-08-18","pretime":"2023-08-18"},{"id":1691738511607,"title":"关于vue3与vue2的路由页面切换写法","content":"vue2的写法是：\n<transition>\n    <router-view></router-view>\n<transition/>\n\n而vue3的写法是：\n    <RouterView v-slot=\"{ Component }\">\n        <transition name=\"fade-transform\" mode=\"out-in\">\n            <keep-alive>\n                <component :is=\"Component\" />\n            </keep-alive>\n        </transition>\n    </RouterView>","time":"2023-08-11","pretime":"2023-08-11"},{"id":1691738393139,"title":"关于发布内容在页面上的的换行显示","content":"在textarea或者input输入框里面，你用键盘输入的内容，包括回车键，空格键等等是会被记录下来的，所以实际上value值是携带\\n字段的\n所以当我需要显示在页面上时，需要解析一下，我这里用的是\n<div class=\"formatted-text\">{{ item.content }}</div>\n给这个div添加一个类名，然后给这个类添加css样式\nwhite-space: pre-line;\n这行代码，这样的话div就会解析字符串里面的字符，实现换行","time":"2023-08-10","pretime":"2023-08-10"},{"id":7,"title":"关于这个pinia状态管理的响应式解构","content":"查阅了一下原来Pinia有提供一个storeToRefs来完成pinia的响应式解构，\nimport useStore from '../store/index';\nimport {storeToRefs} from \"pinia\";\nlet { num } = storeToRefs(useStore);\n大概就是这么用的，\n而且可以从组件里面直接\nnum.value=newValue\n这样来赋值","time":"2023-08-07","pretime":"2023-08-07"},{"id":1692237283920,"title":"关于这个z-index","content":"原来这个z-index的是使用前提是position属性必须是relative、absolute;或;fixed才可以，我还寻思这为啥我的滚轮不生效，原来是鼠标根本没碰到，今天把这个log页面做了差不多了，还剩删除和编辑没做，其实不做了也行，emm再说吧","time":"2023-08-17","pretime":"2023-08-04"},{"id":5,"title":"关于Log的建立","content":"关于log的建立，这个音乐播放器的雏形做得差不多了，路由什么的也都建好了，api接口也调试得大差不差了，还是得整个日志，不然的话之前遇到的问题不能及时记录，就都忘了可惜可惜，今天才开始","time":"2023-07-31","pretime":"2023-07-31"},{"id":4,"title":"关于搜索api（下）","content":"sign这玩意，根据我查找的资料，有最重要的时间戳的获取，然后了解到还有一个serachid的参数估计也很重要，唉，又开始找！因为能找到的贴子都是很久之前的，于是我锁定了距离现在最近的（我能找到的）一篇贴子查看，是一篇关于Python爬取搜索的，里面也提到了sign参数，searchid也在里面，还有最重要的sign和searchid的算法，于是我把重心放到sign上面，在代码里面一直调试，通过修改请求头，请求体，一直调整sign的放置位置，域名也是一个个试，最后发现，其实重点是searchid，是我有意无意把sign和时间戳都删去之后，只保留一个searchid，成功的获取到了数据，并且这个域名和QQ音乐官网是不一样的，我直接疑惑，不过结果是好的，修改了大佬的第三方QQ音乐api，也算做了个接口出来，网上貌似暂时还没有相关的内容，说不定我还能整个视频上去？","time":"2023-07-27","pretime":"2023-07-27"},{"id":3,"title":"关于搜索api（上）","content":"ok，最重要的接口，搜索接口，大佬的api用不了，在网上也很少能找到资料，大部分甚至是20年以前的，ok，估计都没人都会用QQ音乐的接口了一直更新，不过在QQ音乐的官网上面还是可以找到线索的---sign，是搜索接口必须要携带的一个参数，找到了线索是通过前端某个程序的计算得来的，然后放到请求体里面传给QQ音乐官方。于是又开始了寻找sign的路程。。。","time":"2023-07-25","pretime":"2023-07-25"},{"id":1691737376477,"title":"qq音乐的api","content":"只能说不愧是腾讯，人家网易都有开放接口，QQ的却只能以企业组织才能获取QQ音乐开发者名额，emm，不过可以扒网站上的，顺便参考参考网上的大佬总结的接口，于是发现了一个还不错的第三方QQ音乐api包，是一个大佬扒了QQ音乐的官方接口然后整理得来的，有些不能用了，大概是为了版权，所以一直在更新接口吧","time":"2023-07-25","pretime":"2023-07-25"},{"id":2,"title":"音乐播放器","content":"开始做这个项目之后，慢慢的加各种东西，中间本来只是想在顶部导航栏做一个小的音乐播放器，但是做着做着发现局限性有点多，于是诞生出做一个直接音乐播放器的念头,确实是很麻烦的，我的理解是音乐播放器不止可以播放本地的歌曲，而是直接从网上获取歌曲链接，因为我用qq音乐习惯了，所以打算用QQ音乐的接口，但是貌似没有这么简单。。。","time":"2023-07-18","pretime":"2023-07-18"},{"id":1691740703781,"title":"开始","content":"myBlog这个项目从16号开始，找了个实习，但是实习一直不让我过去，闲来无事想做个个人主页，毕竟这玩意做好了可以整到服务器上，还能当作一个项目写到简历上，于是着手准备，自己构思，然后开始！","time":"2023-08-11","pretime":"2023-07-16"}]}